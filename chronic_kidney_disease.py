# -*- coding: utf-8 -*-
"""chronic_kidney_disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TnUphKwjeMklJRMpZNpnYCl_-ljusYb9
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

df_data = pd.read_csv("new_model.csv")
df_data

plt.hist(df_data["Class"])

sns.heatmap(df_data.corr(), annot=True)

sns.regplot(x="Sc", y="Bu", data=df_data)

sns.regplot(x="Sg", y="Hemo", data=df_data)

plt.hist(df_data["Htn"])

X = df_data[["Bp", "Al", "Su", "Bu", "Sc", "Htn"]].values
y = df_data["Class"]
from sklearn.preprocessing import MinMaxScaler
min_max_scaler = MinMaxScaler()
X = min_max_scaler.fit_transform(X)
X
y.shape

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
y_train.shape

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Dense(256, input_shape=(6,)))
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss=tf.keras.losses.BinaryCrossentropy(), metrics=['accuracy'])

model.fit(x_train, y_train, epochs=200, validation_data=(x_test, y_test))

plt.plot(model.history.history['accuracy'], label='accuracy')
plt.plot(model.history.history['val_accuracy'], label='val_accuracy')
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.title("Accuracy of Model")
plt.legend()
plt.show()

plt.plot(model.history.history['loss'], label='loss')
plt.plot(model.history.history['val_loss'], label='val_loss')
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("Loss of Model")
plt.legend()
plt.show()

inp = input("enter a blood pressure")
new_data = np.array([[inp, 0.0, 0.0, 18, 1.2, 0.0]])

# Scale the new data using the same Min-Max scaler
scaled_new_data = min_max_scaler.transform(new_data)

# Make predictions
predicted_probabilities_single = model.predict(scaled_new_data)
if int(predicted_probabilities_single[0][0]) == 1:
  print("The model indicates a presence of kidney disease")
else:
  print("The model indicates an absence of kidney disease")

